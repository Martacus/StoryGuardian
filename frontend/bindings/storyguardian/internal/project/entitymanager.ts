// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function CreateEntity(entity: $models.Entity): Promise<$models.Entity> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2034565022, entity) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function CreateRelation(entityId: string): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(504077, entityId) as any;
    return $resultPromise;
}

export function GetEntity(entityId: string): Promise<$models.Entity | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1103462532, entityId) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function LoadEntities(projectId: string): Promise<$models.Entity[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2389256634, projectId) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function LoadRelationInfo(entityId: string, paginationStart: number, amount: number): Promise<$models.RelationInfo[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3362194505, entityId, paginationStart, amount) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType4($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function SetEntityDescription(entityId: string, description: string): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2374441714, entityId, description) as any;
    return $resultPromise;
}

export function SetEntityName(entityId: string, name: string): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3082711131, entityId, name) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $models.Entity.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType0);
const $$createType3 = $models.RelationInfo.createFrom;
const $$createType4 = $Create.Array($$createType3);
