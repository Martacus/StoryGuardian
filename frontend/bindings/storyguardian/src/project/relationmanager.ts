// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function AddRelationModule(relationId: string, $module: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4140209462, relationId, $module) as any;
    return $resultPromise;
}

export function CreateRelation(entityId: string): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3415959287, entityId) as any;
    return $resultPromise;
}

export function EditRelationModuleConfig(relationId: string, $module: string, config: string, value: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3946188197, relationId, $module, config, value) as any;
    return $resultPromise;
}

export function GetRelation(relationId: string): Promise<$models.Relation | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(34754189, relationId) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetRelationModules(relationid: string, unusedModulesOnly: boolean): Promise<string[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1261186738, relationid, unusedModulesOnly) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function LoadRelationInfo(entityId: string, paginationStart: number, amount: number): Promise<$models.RelationInfo[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(815291267, entityId, paginationStart, amount) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType4($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function LoadRelations(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3169623388) as any;
    return $resultPromise;
}

export function SaveRelation(relation: $models.Relation): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2129402810, relation) as any;
    return $resultPromise;
}

export function SetRelationDescription(relationId: string, description: string): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(439834261, relationId, description) as any;
    return $resultPromise;
}

export function SetRelationName(relationId: string, name: string): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(953438602, relationId, name) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $models.Relation.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($Create.Any);
const $$createType3 = $models.RelationInfo.createFrom;
const $$createType4 = $Create.Array($$createType3);
